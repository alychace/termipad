#!/usr/bin/ruby
# Copyright (C) Thomas Chace 2011-2014 <tchacex@gmail.com>
# This file is part of Post.
# Post is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Post is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with Post.  If not, see <http://www.gnu.org/licenses/>.

require 'rubygems'
require 'optparse'

require 'yaml'
require 'fileutils'

NAME = $0
VERSION = '0.0.1'
OPTIONS = {}
TIME = Time.now.to_s.sub(' ', '_').sub(" -", "_")

NOTE = {}

NOTE[:notebook] = "unsorted"
NOTE[:time] = TIME

OPTIONS[:template] = """---
title: $TITLE
created: $TIME
notebook: $NOTEBOOK
tags:
- myTag
---

# Heading 1
Lorem ipsum dolor sit amet, consectetur adipisicing elit...
"""

begin
    CONFIG = YAML::load_file(ENV['HOME'] + "/.notes/settings.yaml")
    OPTIONS[:editor] = CONFIG['editor']
    OPTIONS[:notes_source] = CONFIG['notes_source'].sub("~", "#{ENV['HOME']}/")
rescue
    OPTIONS[:editor] = "vi"
    OPTIONS[:notes_source] = "#{ENV['HOME']}/notes"
end

FileUtils.mkdir_p("#{OPTIONS[:notes_source]}")
NOTES = Dir["#{OPTIONS[:notes_source]}/*"].map { |a| File.basename(a) }

###############################################################################
#### Note Operations
###############################################################################

def new_note(name)
    filename = "#{OPTIONS[:notes_source]}/#{name}-#{TIME}.markdown"

    file = File.new(filename, 'w+')
    OPTIONS[:template].sub!('$TITLE', name)
    OPTIONS[:template].sub!('$TIME', NOTE[:time])
    OPTIONS[:template].sub!('$NOTEBOOK', NOTE[:notebook])
    file.puts(OPTIONS[:template])
    file.close()
    
    puts "Editing '#{filename}'..."
    system("#{OPTIONS[:editor]} '#{filename}'")
end

def edit_note(name)
    list = []
    for note in NOTES
        data = YAML::load_file("#{OPTIONS[:notes_source]}" + note)
        list.push(note) if data["title"] == name
    end

    puts("There may be multiple notes with this name:")

    i = 0
    for note in list
        puts("(#{i.to_s}) #{note}")
        i = i + 1
    end
    print('Which note would you like to edit? ')
    choice = gets.strip
    puts "Editing '#{list[choice.to_i]}'..."
    system("#{OPTIONS[:editor]} '#{OPTIONS[:notes_source]}/#{list[choice.to_i]}'")
end

def delete_note(name)
    for note in NOTES
        data = YAML::load_file("#{OPTIONS[:notes_source]}" + note)
        FileUtils.rm("#{OPTIONS[:notes_source]}" + note) if data["title"] == name
    end
end

###############################################################################
#### Queries
###############################################################################

def find_by(attribute, name)
    list = []
    for note in NOTES
        data = YAML::load_file("#{OPTIONS[:notes_source]}/" + note)
        list.push(note) if data[attribute] == name
        if attribute == "tags"
            list.push(note) if data["tags"].include?(name)
        end
    end
    puts list
end

def search(term)
    list = []
    for note in NOTES
        file = File.new("#{OPTIONS[:notes_source]}/" + note, "r").read
        list.push(note) if file.include?(term)
    end
    puts list
end

###############################################################################
#### Argument Handling
###############################################################################

options = ARGV.options()
options.set_summary_indent('    ')
options.banner =    "Usage: #{NAME} [OPTIONS] [NOTE]"
options.version =   "#{NAME} #{VERSION}"
options.define_head "Copyright (C) Thomas Chace 2014 <tchacex@gmail.com>"

#### Settings

options.on('--editor=OPT', String, "Change the text editor." ) do |arg|
    OPTIONS[:editor] = arg
end

options.on('--time=OPT', String, "Set creation time." ) do |arg|
    NOTE[:time] = arg
end

options.on('--notebook=OPT', String, "Set the notebook." ) do |arg|
    NOTE[:notebook] = arg
end


options.separator("")

#### Options.

options.on('-n', '--new NAME', String, "Create a new note." ) do |arg|
    new_note(arg);
end

options.on('-e', '--edit NAME', String, "Edit a note." ) do |arg|
    edit_note(arg);
end

options.on('-d', '--delete NAME', String, "Delete a note." ) do |arg|
    delete_note(arg);
end

options.separator("")

#### Database Queries

options.on('--tag TAG', String, "Find all notes with a tag." ) do |arg|
    find_by("tags", arg)
end


options.on('--title TITLE', String, "Find all notes with certain title." ) do |arg|
    find_by("title", arg)
end

options.on('--notebook NOTEBOOK', String, "Find all notes within a notebook." ) do |arg|g
    find_by("notebook", arg)
end

options.on('--search TERM', String, "List all notes containing a certain string." ) do |arg|
    search(arg)
end

options.separator("")

#### Help and Version

options.on('-h', '--help', 'Show this help message.') { puts(options) }
options.on('-v', '--version', 'Show version information.') { puts(options.version) }

options.parse!