#!/usr/bin/ruby
# Copyright (C) Thomas Chace 2014 <tchacex@gmail.com>
# This file is part of Termipad.
# Termipad is free software: you can redistribute it and/or modify
# itP under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Termipad is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with Termipad.  If not, see <http://www.gnu.org/licenses/>.

require 'optparse'
require 'fileutils'
require 'yaml'
require 'redcarpet'

OPTIONS = {}
TIME = Time.now.to_s.sub(' ', '_').sub ' -', '_'
CONFIG = YAML::load_file(ENV['HOME'] + '/.notes/settings.yaml')
OPTIONS[:notebook] = 'unsorted'
OPTIONS[:time] = TIME
OPTIONS[:export_directory] = ENV['PWD']
OPTIONS[:template] = File.read ENV['HOME'] + '/.notes/template.markdown'
OPTIONS[:editor] = CONFIG['editor']
OPTIONS[:notes_source] = CONFIG['notes_source'].sub('~', "#{ENV['HOME']}/")

FileUtils.mkdir_p "#{OPTIONS[:notes_source]}"
NOTES = Dir["#{OPTIONS[:notes_source]}/*"].map { |a| File.basename(a) }

###############################################################################
#### Queries
###############################################################################

def find_by attribute, term
    NOTES.select do |note|
        data = YAML::load_file("#{OPTIONS[:notes_source]}/" + note)
        file = File.new("#{OPTIONS[:notes_source]}/" + note, "r").read
        if attribute == :tags
            note if data[attribute.to_s].include?(term)
        elsif attribute == :content
            note if file.include?(term)
        else
            note if data[attribute.to_s] == term
        end
    end
end

###############################################################################
#### Note Operations
###############################################################################

def get_input list
    i = 0
    list.each do |note|
        puts("(#{i.to_s}) #{note}")
        i += 1
    end
    print 'Choice: '
    list[gets.to_i]
end

def new_note name
    file = File.new("#{OPTIONS[:notes_source]}/#{name}-#{TIME}.markdown", 'w+')
    OPTIONS[:template].sub!('$TITLE', name)
    OPTIONS[:template].sub!('$TIME', OPTIONS[:time])
    OPTIONS[:template].sub!('$NOTEBOOK', OPTIONS[:notebook])
    file.puts OPTIONS[:template]
end

def edit_note name
    list = find_by :title, name
    system "#{OPTIONS[:editor]} '#{OPTIONS[:notes_source]}/#{list[get_input(list).to_i]}'" unless list.empty?
end

def delete_note name
    list = find_by :title, name
    FileUtils.rm "#{OPTIONS[:notes_source]}/#{list[get_input(list).to_i]}" unless list.empty?
end

###############################################################################
#### Exporting
###############################################################################

def to_html notebook, folder
    FileUtils.mkdir_p folder
    renderer = Redcarpet::Render::HTML.new(render_options = {})
    markdown = Redcarpet::Markdown.new(renderer, extensions = {})

    find_by(:notebook, notebook).each do |note|
        input = File.new("#{OPTIONS[:notes_source]}/" + note, 'r').readlines
        output = File.new(folder + '/' + note.sub('.markdown', '.html'), 'w')
        ignore = false
        input.each do |line|
            ignore = !ignore if line.start_with? '---'
            output.puts(markdown.render(line)) unless ignore
        end
    end
end

###############################################################################
#### Argument Handling
###############################################################################

ARGV.options.set_summary_indent '    '
ARGV.options.banner =    "Usage: [OPTIONS] [COMMANDS] [TEXT]"
ARGV.options.version =   "#{$0} 0.1"
ARGV.options.define_head "Copyright (C) Thomas Chace 2014 <tchacex@gmail.com>"

#### Options

ARGV.options.on('--editor=OPT', String, "Change the text editor." ) do |arg|
    OPTIONS[:editor] = arg
end

ARGV.options.on('--time=OPT', String, "Set creation time." ) do |arg|
    OPTIONS[:time] = arg
end

ARGV.options.on('--notebook=OPT', String, "Set the notebook." ) do |arg|
    OPTIONS[:notebook] = arg
end

ARGV.options.on('--destination=OPT', String, "Set the destination for exported notes." ) do |arg|
    OPTIONS[:export_directory] = arg
end

ARGV.options.on('-n', '--new NOTE', String, "Create a new note." ) do |arg|
    new_note arg
end

ARGV.options.on('-e', '--edit NOTE', String, "Edit a note." ) do |arg|
    edit_note arg
end

ARGV.options.on('-d', '--delete NOTE', String, "Delete a note." ) do |arg|
    delete_note arg
end

#### Database Queries

ARGV.options.separator ''

ARGV.options.on('--tag TAG', String, "Find all notes with a tag." ) do |arg|
    puts find_by :tags, arg
end


ARGV.options.on('--title TITLE', String, "Find all notes with certain title." ) do |arg|
    puts find_by :title, arg
end

ARGV.options.on('--notebook NOTEBOOK', String, "Find all notes within a notebook." ) do |arg|
    puts find_by :notebook, arg
end

ARGV.options.on('--search TERM', String, "List all notes containing a certain string." ) do |arg|
    puts find_by :content, arg
end

#### Exporting

ARGV.options.separator ''

ARGV.options.on('--html NOTEBOOK', String, "Export a notebook to HTML." ) do |arg|
    to_html arg, OPTIONS[:export_directory]
end

#### Help and Version

ARGV.options.separator ''

ARGV.options.on('-h', '--help', 'Show this help message.') { puts(ARGV.options) }
ARGV.options.on('-v', '--version', 'Show version information.') { puts(ARGV.options.version) }

ARGV.options.parse!